linreg <- function(input, target) {
x <- input
xt <- t(x)
beta <- solve(xt %*% x) %*% (xt %*% target)
return(input %*% beta)
}
y <- function(x) -0.5 - x
x <- seq(0, 1, 0.01)
plot(x,y, type='l')
plot(x,y(x), type='l')
points(0,1)
help(plot)
x2 <- c(0,1,0,1)
y2 <- c(0,0,1,1)
plot(x,y(x), type='l')
par(new=TRUE)
plot(x2,y2,type='o')
plot(x,y(x), type='l', xlim = c(-0.2, 1.2), ylim = c(-0.2, 1.2))
x
y(x)
plot(x,y(x), type='l', xlim = c(-0.2, 1.2), ylim = c(-0.2, 1.2))
y <- function(x) 0.5 - x
plot(x,y(x), type='l', xlim = c(-0.2, 1.2), ylim = c(-0.2, 1.2))
points(0,1)
points(0,0)
points(1,1)
points(1,0)
linreg <- function(input, target) {
x <- input
xt <- t(x)
return solve(xt %*% x) %*% (xt %*% target)
}
linreg <- function(input, target) {
x <- input
xt <- t(x)
return(solve(xt %*% x) %*% (xt %*% target))
}
x <- matrix(0, 4, 3)
x[,1] = -1 # Bias
x[,2] = c(0,1,0,1)
x[,3] = c(0,0,1,1)
t <- c(0,1,1,1)
y <- linreg(x, t)
y
linreg <- function(input, target) {
x <- input
xt <- t(x)
beta <- solve(xt %*% x) %*% (xt %*% target)
return(input %*% beta)
}
linreg(x,t)
x
t
a <- c(0,1,0,1)
b <- c(0,0,1,1)
m <- matrix(c(0,1,0,1,0,0,1,1), 4, 2, F)
t <- c(0,1,1,1)
lm(t ~ m)
linreg <- function(input, target) {
x <- input
xt <- t(x)
beta <- solve(xt %*% x) %*% (xt %*% target)
}
linreg(m, t)
linreg(m, t)
linreg(m, t)
linreg(m, t)
disp(linreg(m, t))
m
t
linreg(m,t)
x <- cbind(c(1,1,1,1), m)
x
linreg(x,t)
linreg <- function(input, target) {
x <- input
xt <- t(x)
beta <- solve(xt %*% x) %*% (xt %*% target)
return(input %*% beta)
}
linreg(x,t)
getwd()
setwd("Documents/Project/Machine_Learning/ML_Project/Bishop/1st/")
x <- seq(0, 1, 0.01)
y <- x^2 + runif(101)
#fit first degree polynomial equation:
fit  <- lm(y~x)
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
#third degree
fit3 <- lm(y~poly(x,3,raw=TRUE))
#fourth degree
fit4 <- lm(y~poly(x,4,raw=TRUE))
#generate range of 50 numbers starting from 30 and ending at 160
xx <- seq(0, 1, 0.01)
plot(x,y)
lines(xx, predict(fit, data.frame(x=xx)), col="red")
lines(xx, predict(fit2, data.frame(x=xx)), col="green")
lines(xx, predict(fit3, data.frame(x=xx)), col="blue")
lines(xx, predict(fit4, data.frame(x=xx)), col="purple")
x <- seq(0, 1, 0.01)
y <- x^2 + runif(101) / 10
#fit first degree polynomial equation:
fit  <- lm(y~x)
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
#third degree
fit3 <- lm(y~poly(x,3,raw=TRUE))
#fourth degree
fit4 <- lm(y~poly(x,4,raw=TRUE))
#generate range of 50 numbers starting from 30 and ending at 160
xx <- seq(0, 1, 0.01)
plot(x,y)
lines(xx, predict(fit, data.frame(x=xx)), col="red")
lines(xx, predict(fit2, data.frame(x=xx)), col="green")
lines(xx, predict(fit3, data.frame(x=xx)), col="blue")
lines(xx, predict(fit4, data.frame(x=xx)), col="purple")
x <- seq(0, 1, 0.01)
y <- x^2 + runif(101) / 10
#fit first degree polynomial equation:
fit  <- lm(y~x)
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
#third degree
fit3 <- lm(y~poly(x,3,raw=TRUE))
#fourth degree
fit4 <- lm(y~poly(x,4,raw=TRUE))
#generate range of 50 numbers starting from 30 and ending at 160
xx <- seq(0, 1, 0.01)
plot(x,y)
lines(xx, predict(fit, data.frame(x=xx)), col="red")
lines(xx, predict(fit2, data.frame(x=xx)), col="green")
x <- seq(0, 1, 0.01)
y <- x^2 + runif(101) / 10
#fit first degree polynomial equation:
fit  <- lm(y~x)
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
#third degree
fit3 <- lm(y~poly(x,3,raw=TRUE))
#fourth degree
fit4 <- lm(y~poly(x,4,raw=TRUE))
#generate range of 50 numbers starting from 30 and ending at 160
xx <- seq(0, 1, 0.01)
plot(x,y)
lines(xx, predict(fit, data.frame(x=xx)), col="red")
lines(xx, predict(fit2, data.frame(x=xx)), col="blue")
